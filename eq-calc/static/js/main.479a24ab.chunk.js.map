{"version":3,"sources":["components/MolecularInputRow.tsx","logic.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["MolecularInputRow","title","unitOptions","selectedUnitIndex","onValueChange","onUnitChange","props","Number","isInteger","length","Error","Form","Row","className","Label","column","xs","md","Col","InputGroup","Control","onChange","value","target","as","style","width","parseInt","map","u","i","key","computeEquilibrium","multipleTotalConcWV","addtl","singleTotalConcWV","mwExcessComponent","mwLimitingComponent","KD","foldExcess","totalConcWV","concExcessComponentWV","math","multiply","divide","done","concLimitingComponentWV","concABInitialMolar","concExcessInitialMolar","b","c","four_ac","square","numer","denom","concLimitingFinalMolar","concABFinalMolar","concExcessFinalMolar","fractionPossibleAB","concAllParticles","add","fractionParticlesAB","fractionParticlesLimiting","fractionParticlesExcess","percentPossibleAB","percentParticlesAB","percentParticlesLimiting","percentParticlesExcess","computeSingleEquilibrium","mwUnitOptions","display","kDUnitOptions","v","d","e","stateReducer","state","action","initialState","mwA","mwUnitIndexA","mwB","mwUnitIndexB","kD","kDUnitIndex","partsA","partsB","concentrations","tableColumns","dataField","text","editable","formatPercent","isNaN","toLocaleString","undefined","maximumFractionDigits","App","useReducer","dispatchStateReducer","output","NaN","percentParticlesA","percentParticlesB","s","mwUnitA","parseFloat","mwUnitB","mwExcess","mwLimiting","partsExcess","partsLimiting","o","A","B","compute","tableRows","id","conc","Container","fluid","Card","Body","Title","unit","Text","bootstrap4","keyField","data","columns","cellEdit","cellEditFactory","mode","blurToSave","afterSaveCell","oldVal","newVal","newConc","wrapperClasses","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.479a24ab.chunk.js","sourcesContent":["import React, {FC} from \"react\"\n\nimport {FormControlProps} from \"react-bootstrap/FormControl\"\nimport InputGroup from \"react-bootstrap/InputGroup\"\nimport Form from \"react-bootstrap/Form\"\nimport Col from \"react-bootstrap/Col\"\n\nimport \"./InputRow.css\"\n\ninterface MolecularInputRowProps extends FormControlProps {\n  title: React.ReactNode\n  unitOptions: string[]\n  selectedUnitIndex?: number\n  onValueChange?: (value: string) => void\n  onUnitChange?: (unitIndex: number) => void\n}\n\nconst MolecularInputRow: FC<MolecularInputRowProps> = ({\n  title,\n  unitOptions,\n  selectedUnitIndex = 0,\n  onValueChange = () => {},\n  onUnitChange = () => {},\n  ...props\n}) => {\n  if (\n    !Number.isInteger(selectedUnitIndex) ||\n    selectedUnitIndex < 0 ||\n    selectedUnitIndex >= unitOptions.length\n  )\n    throw Error(`'selectedUnitIndex' must be an integer between 0 and ${unitOptions.length - 1}`)\n\n  return (\n    <Form.Row className=\"mb-1\">\n      <Form.Label column xs={12} md={12} className=\"input-label\">\n        {title}\n      </Form.Label>\n      <Col>\n        <InputGroup>\n          <Form.Control\n            {...props}\n            className=\"value text-right\"\n            onChange={({target: {value}}) => onValueChange(value)}\n          />\n          <Form.Control\n            as=\"select\"\n            className=\"unit\"\n            style={{width: \"fit-content\"}}\n            value={selectedUnitIndex}\n            onChange={({target: {value}}) => onUnitChange(parseInt(value))}\n          >\n            {unitOptions.map((u, i) => (\n              <option key={i} value={i}>\n                {u}\n              </option>\n            ))}\n          </Form.Control>\n        </InputGroup>\n      </Col>\n    </Form.Row>\n  )\n}\n\nexport default MolecularInputRow\n","import * as math from \"mathjs\"\n\ninterface IInputParamsSingle {\n  mwExcessComponent: math.Unit\n  mwLimitingComponent: math.Unit\n  KD: math.Unit\n  foldExcess: number\n  totalConcWV: math.Unit\n}\n\ninterface IInputParams {\n  mwExcessComponent: math.Unit\n  mwLimitingComponent: math.Unit\n  KD: math.Unit\n  foldExcess: number\n  multipleTotalConcWV: math.Unit[]\n}\n\ninterface IOutput {\n  percentPossibleAB: number\n  percentParticlesAB: number\n  percentParticlesLimiting: number\n  percentParticlesExcess: number\n}\n\nexport function computeEquilibrium({multipleTotalConcWV, ...addtl}: IInputParams): IOutput[] {\n  return multipleTotalConcWV.map((singleTotalConcWV) =>\n    computeSingleEquilibrium({...addtl, totalConcWV: singleTotalConcWV}),\n  )\n}\n\nexport function computeSingleEquilibrium({\n  mwExcessComponent,\n  mwLimitingComponent,\n  KD,\n  foldExcess,\n  totalConcWV,\n}: IInputParamsSingle): IOutput {\n  const concExcessComponentWV: math.Unit = math\n    .chain(foldExcess)\n    .multiply(totalConcWV)\n    .multiply(mwExcessComponent)\n    .divide(math.add(mwLimitingComponent, math.multiply(foldExcess, mwExcessComponent)))\n    .done()\n  const concLimitingComponentWV: math.Unit = math.subtract(\n    totalConcWV,\n    concExcessComponentWV,\n  ) as math.Unit\n  const concABInitialMolar: math.Unit = math.divide(concLimitingComponentWV, mwLimitingComponent)\n  const concExcessInitialMolar: math.Unit = math.subtract(\n    math.divide(concExcessComponentWV, mwExcessComponent),\n    concABInitialMolar,\n  ) as math.Unit\n\n  const a = 1\n  const b: math.Unit = math.add(concExcessInitialMolar, KD) as math.Unit\n  const c = math.unaryMinus(math.multiply(concABInitialMolar, KD))\n\n  const four_ac: math.Unit = math.chain(4).multiply(a).multiply(c).done()\n  const square: math.Unit = math.subtract(math.square(b), four_ac) as math.Unit\n  const numer: math.Unit = math.add(math.unaryMinus(b), math.sqrt(square)) as math.Unit\n  const denom = math.multiply(2, a)\n\n  const concLimitingFinalMolar: math.Unit = math.divide(numer, denom) as math.Unit\n\n  const concABFinalMolar: math.Unit = math.subtract(\n    concABInitialMolar,\n    concLimitingFinalMolar,\n  ) as math.Unit\n\n  const concExcessFinalMolar: math.Unit = math.add(\n    concExcessInitialMolar,\n    concLimitingFinalMolar,\n  ) as math.Unit\n\n  const fractionPossibleAB: number = (math.divide(\n    concABFinalMolar,\n    concABInitialMolar,\n  ) as unknown) as number\n\n  const concAllParticles: math.Unit = math\n    .chain(concABFinalMolar)\n    .add(concLimitingFinalMolar)\n    .add(concExcessFinalMolar)\n    .done()\n  const fractionParticlesAB: number = (math.divide(\n    concABFinalMolar,\n    concAllParticles,\n  ) as unknown) as number\n  const fractionParticlesLimiting: number = (math.divide(\n    concLimitingFinalMolar,\n    concAllParticles,\n  ) as unknown) as number\n  const fractionParticlesExcess: number = (math.divide(\n    concExcessFinalMolar,\n    concAllParticles,\n  ) as unknown) as number\n\n  return {\n    percentPossibleAB: fractionPossibleAB * 100,\n    percentParticlesAB: fractionParticlesAB * 100,\n    percentParticlesLimiting: fractionParticlesLimiting * 100,\n    percentParticlesExcess: fractionParticlesExcess * 100,\n  }\n}\n","import React, {useReducer} from \"react\"\n\nimport InputGroup from \"react-bootstrap/InputGroup\"\nimport Container from \"react-bootstrap/Container\"\nimport Card from \"react-bootstrap/Card\"\nimport Form from \"react-bootstrap/Form\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\n\nimport BootstrapTable from \"react-bootstrap-table-next\"\n// @ts-ignore\nimport cellEditFactory from \"react-bootstrap-table2-editor\"\n\nimport * as math from \"mathjs\"\n\nimport MolecularInputRow from \"./MolecularInputRow\"\nimport {computeEquilibrium} from \"../logic\"\n\nimport \"./App.scss\"\n\nconst mwUnitOptions = [\n  {value: \"g/mol\", display: \"g/mol\"},\n  {\n    value: \"g/mol\",\n    display: \"Da\",\n  },\n  {value: \"kg/mol\", display: \"kDa\"},\n]\nconst kDUnitOptions = [\n  {v: \"\"},\n  {v: \"m\"},\n  {\n    v: \"u\",\n    d: \"μ\",\n  },\n  {v: \"n\"},\n  {v: \"p\"},\n  {v: \"f\"},\n].map((e) => ({value: `${e.v}mol/L`, display: `${e.d || e.v}M`}))\n\ninterface State {\n  mwA: string\n  mwUnitIndexA: number\n  mwB: string\n  mwUnitIndexB: number\n  kD: string\n  kDUnitIndex: number\n  partsA: string\n  partsB: string\n  concentrations: string[]\n}\n\ntype ChangeAction<S> = (s: S) => S\n\nfunction stateReducer(state: State, action: ChangeAction<State>): State {\n  return action(state)\n}\n\nconst initialState = {\n  mwA: \"50\",\n  mwUnitIndexA: 2,\n  mwB: \"150\",\n  mwUnitIndexB: 2,\n  kD: \"10\",\n  kDUnitIndex: 3,\n  partsA: \"1\",\n  partsB: \"1\",\n  concentrations: [\"0.05\", \"0.04\", \"0.01\", \"0.004\"],\n} as State\n\nconst tableColumns = [\n  {dataField: \"conc\", text: \"Total Concentration (mg/mL)\"},\n  {dataField: \"percentPossibleAB\", text: \"Percent resulting AB vs. possible AB\", editable: false},\n  {\n    dataField: \"percentParticlesAB\",\n    text: \"Percent of the particles corresponding to AB\",\n    editable: false,\n  },\n  {\n    dataField: \"percentParticlesA\",\n    text: \"Percent of the particles corresponding to A\",\n    editable: false,\n  },\n  {\n    dataField: \"percentParticlesB\",\n    text: \"Percent of the particles corresponding to B\",\n    editable: false,\n  },\n]\n\ninterface TableRow {\n  id: number\n  conc: string\n  percentPossibleAB: string | number\n  percentParticlesAB: string | number\n  percentParticlesA: string | number\n  percentParticlesB: string | number\n}\n\nfunction compute(s: State) {\n  const mwUnitA = math.unit(`${parseFloat(s.mwA)} ${mwUnitOptions[s.mwUnitIndexA].value}`)\n  const mwUnitB = math.unit(`${parseFloat(s.mwB)} ${mwUnitOptions[s.mwUnitIndexB].value}`)\n  const [mwExcess, mwLimiting, partsExcess, partsLimiting] =\n    s.partsA > s.partsB\n      ? [mwUnitA, mwUnitB, s.partsA, s.partsB]\n      : [mwUnitB, mwUnitA, s.partsB, s.partsA]\n  return computeEquilibrium({\n    mwExcessComponent: mwExcess,\n    mwLimitingComponent: mwLimiting,\n    KD: math.unit(`${parseFloat(s.kD)} ${kDUnitOptions[s.kDUnitIndex].value}`),\n    foldExcess: parseFloat(partsExcess) / parseFloat(partsLimiting),\n    multipleTotalConcWV: s.concentrations.map((e) => math.unit(`${parseFloat(e)} mg/mL`)),\n  }).map(({percentParticlesExcess, percentParticlesLimiting, ...o}) => {\n    const [A, B] =\n      s.partsA > s.partsB\n        ? [percentParticlesExcess, percentParticlesLimiting]\n        : [percentParticlesLimiting, percentParticlesExcess]\n    return {percentParticlesA: A, percentParticlesB: B, ...o}\n  })\n}\n\nfunction formatPercent(value: number) {\n  return isNaN(value)\n    ? \"-- %\"\n    : value.toLocaleString(undefined, {\n        maximumFractionDigits: 0,\n      }) + \" %\"\n}\n\nfunction App() {\n  const [state, dispatchStateReducer] = useReducer(stateReducer, initialState)\n\n  let output = state.concentrations.map(() => ({\n    percentPossibleAB: NaN,\n    percentParticlesAB: NaN,\n    percentParticlesA: NaN,\n    percentParticlesB: NaN,\n  }))\n\n  try {\n    output = compute(state)\n  } catch (e) {}\n\n  const tableRows = state.concentrations.map(\n    (c, i): TableRow => {\n      return {\n        id: i,\n        conc: c,\n        percentPossibleAB: formatPercent(output[i].percentPossibleAB),\n        percentParticlesAB: formatPercent(output[i].percentParticlesAB),\n        percentParticlesA: formatPercent(output[i].percentParticlesA),\n        percentParticlesB: formatPercent(output[i].percentParticlesB),\n      }\n    },\n  )\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n          <h1 className=\"text-center\">Dilution Equilibrium Calculator</h1>\n        </Col>\n      </Row>\n      <Row>\n        <Col md={3} className=\"mt-2\">\n          <Card>\n            <Card.Body>\n              <Card.Title className=\"text-center\">AB ⇌ A + B</Card.Title>\n              <Form>\n                <MolecularInputRow\n                  title=\"Molecular Weight A\"\n                  unitOptions={mwUnitOptions.map((e) => e.display)}\n                  selectedUnitIndex={state.mwUnitIndexA}\n                  value={state.mwA}\n                  onValueChange={(value) => {\n                    dispatchStateReducer((s) => ({...s, mwA: value}))\n                  }}\n                  onUnitChange={(unit) => {\n                    dispatchStateReducer((s) => ({...s, mwUnitIndexA: unit}))\n                  }}\n                />\n                <MolecularInputRow\n                  title=\"Molecular Weight B\"\n                  unitOptions={mwUnitOptions.map((e) => e.display)}\n                  selectedUnitIndex={state.mwUnitIndexB}\n                  value={state.mwB}\n                  onValueChange={(value) => {\n                    dispatchStateReducer((s) => ({...s, mwB: value}))\n                  }}\n                  onUnitChange={(unit) => {\n                    dispatchStateReducer((s) => ({...s, mwUnitIndexB: unit}))\n                  }}\n                />\n                <MolecularInputRow\n                  title={\n                    <>\n                      K<sub>D</sub>\n                    </>\n                  }\n                  unitOptions={kDUnitOptions.map((e) => e.display || e.value)}\n                  selectedUnitIndex={state.kDUnitIndex}\n                  value={state.kD}\n                  onValueChange={(value) => {\n                    dispatchStateReducer((s) => ({...s, kD: value}))\n                  }}\n                  onUnitChange={(unit) => {\n                    dispatchStateReducer((s) => ({...s, kDUnitIndex: unit}))\n                  }}\n                />\n                <Form.Row className=\"mb-1\">\n                  <Form.Label column xs={12} className=\"text-center\">\n                    Molecular Parts A:B\n                  </Form.Label>\n                  <InputGroup>\n                    <Form.Control\n                      value={state.partsA}\n                      className=\"text-right\"\n                      onChange={({target: {value}}) =>\n                        dispatchStateReducer((s) => ({\n                          ...s,\n                          partsA: value,\n                        }))\n                      }\n                    />\n                    <div className=\"input-group-append input-group-prepend\">\n                      <InputGroup.Text>:</InputGroup.Text>\n                    </div>\n                    <Form.Control\n                      value={state.partsB}\n                      onChange={({target: {value}}) =>\n                        dispatchStateReducer((s) => ({\n                          ...s,\n                          partsB: value,\n                        }))\n                      }\n                    />\n                  </InputGroup>\n                </Form.Row>\n              </Form>\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col md={9} className=\"mt-2\">\n          <Card>\n            <Card.Body>\n              <BootstrapTable\n                bootstrap4\n                keyField=\"id\"\n                data={tableRows}\n                columns={tableColumns}\n                cellEdit={cellEditFactory({\n                  mode: \"click\",\n                  blurToSave: true,\n                  afterSaveCell: (oldVal: string, newVal: string, {id}: {id: number}) => {\n                    dispatchStateReducer((s) => {\n                      const newConc = [...s.concentrations]\n                      newConc[id] = newVal\n                      return {...s, concentrations: newConc}\n                    })\n                  },\n                })}\n                wrapperClasses=\"table-responsive\"\n              />\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}